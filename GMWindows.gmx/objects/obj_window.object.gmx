<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flags.
// Size.
    window_width = 128;
    window_height = 128;
    min_window_width = 64;
    min_window_height = 64;

// Is The Window Being Held Around?
    held = false;

// Can Close the window?
    can_close = false;
    
// Focus
    mouse_inside_x = true;
    mouse_inside_y = true;
    mouse_inside = true;

// Drawing values
    window_topbar_height = 16;
    window_icon = 0;
    fading = -1;
    window_scale = 0;

// Resizing.
    resizing = false;
    resizing_dir = 0;
    resizing_startx = x;
    resizing_starty = y;
    resizing_deadzone_outer = 6;
    resizing_deadzone_inward = 12;

// Offset. Used for when the window is being held.
    x_off = 0;
    y_off = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fades.
    // Fade In
        if fading = -1
        {
            if window_scale &lt; 1
            {
                window_scale += 0.1;
            }
            else
            {
                fading = 0;
            }
        }
        
    // Fade Out
        if fading = 1
        {
            if window_scale &gt; 0
            {
                window_scale -= 0.1;
                exit;
            }
            else
            {
                instance_destroy();
            }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Close Window
if global.win_in_focus == id
{
    if (mouse_x &gt; x - 12 - 4 + window_width) &amp;&amp; (mouse_x &lt; x - 4 + window_width) &amp;&amp; (mouse_y &gt; y + 2) &amp;&amp; (mouse_y &lt; y + 2 + 12)
    {
        can_close = true;
    }
    else
    {
        can_close = false;
    }

    if (mouse_check_button_pressed(mb_left) &amp;&amp; can_close)
    {
        fading = 1;
        global.win_in_focus = -1;
        exit;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if mouse is inside
    // X
        if (mouse_x &gt; x &amp;&amp; mouse_x &lt; x + window_width)
        {
            mouse_inside_x = true;
        }
        else
        {
            mouse_inside_x = false;
        }
    
    // Y
        if (mouse_y &gt; y &amp;&amp; mouse_y &lt; y + window_width)
        {
            mouse_inside_y = true;
        }
        else
        {
            mouse_inside_y = false;
        }
        
    // General
        if (mouse_inside_y &amp;&amp; mouse_inside_x)
        {
            mouse_inside = true;
        }
        else
        {
            mouse_inside = false;
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Mask
mask_index = spr_dot;
image_xscale = window_width;
image_yscale = window_height;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Focus
    // Set Depth
        if (global.win_in_focus = id)
        {
            if depth != -9999
            {
                depth = -9999;
            }
        }
        else
        {
            if (depth != 0)
            {
                depth = 0;
            }
        }
        
    // Set Focus to Self
        if (mouse_check_button(mb_left) &amp;&amp; mouse_inside &amp;&amp; global.win_in_focus != id)
        {
            if (global.win_in_focus != -1)
            {
                if ((global.win_in_focus.mouse_inside == false) &amp;&amp; (global.win_in_focus.held == false) &amp;&amp; (global.win_in_focus.resizing == false))
                {
                    global.win_in_focus = id;
                }
            }
            else
            {
                 global.win_in_focus = id;
            }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resize Windows
    // Handle
        if (resizing)
        {
            // Left
                if (resizing_dir = DIR_LEFT)
                {
                    var _xoff;
                    _xoff = mouse_x - resizing_startx;
                    
                    if ((resizing_startwidth - _xoff) &gt; min_window_width)
                    {
                        x = (resizing_startx + _xoff);
                        window_width = (resizing_startwidth - _xoff);
                    }
                }
            
            // Right.
                if (resizing_dir = DIR_RIGHT)
                {
                    if (abs(mouse_x - x) &gt; min_window_width)
                    {
                        window_width = abs(mouse_x - x);
                    }
                }
                
            // Up
                if (resizing_dir = DIR_UP)
                {
                    var _yoff;
                    _yoff = mouse_y - resizing_starty;
                    
                    if ((resizing_startheight - _yoff) &gt; min_window_height)
                    {
                        y = (resizing_starty + _yoff);
                        window_height = (resizing_startheight - _yoff);
                    }
                }
            
            // Down.
                if (resizing_dir = DIR_DOWN)
                {
                    if (abs(mouse_y - y) &gt; min_window_height)
                    {
                        window_height = abs(mouse_y - y);
                    }
                }
        }
        
    // Trigger
        if (mouse_check_button_pressed(mb_left) &amp;&amp; global.win_in_focus == id)
        {
            // Left.
                if ((mouse_x &lt; x + resizing_deadzone_inward) &amp;&amp; (mouse_x &gt; x - resizing_deadzone_outer))
                {
                    resizing_dir = DIR_LEFT;
                    resizing = true;
                    resizing_startx = x;
                    resizing_startwidth = window_width;
                }
            
            // Right.
                if ((mouse_x &gt; (x + window_width) - resizing_deadzone_inward) &amp;&amp; (mouse_x &lt; (x + window_width) + resizing_deadzone_outer))
                {
                    resizing_dir = DIR_RIGHT;
                    resizing = true;
                }
                
            // Up.
                if ((mouse_y &lt; y + resizing_deadzone_inward/2) &amp;&amp; (mouse_y &gt; y - resizing_deadzone_outer/2))
                {
                    resizing_dir = DIR_UP;
                    resizing = true;
                    resizing_starty = y;
                    resizing_startheight = window_height;
                }
            
            // Down.
                if ((mouse_y &gt; (y + window_height) - resizing_deadzone_inward) &amp;&amp; (mouse_y &lt; (y + window_height) + resizing_deadzone_outer))
                {
                    resizing_dir = DIR_DOWN;
                    resizing = true;
                }
        }
        
    // Untrigger
        if (mouse_check_button_released(mb_left) &amp;&amp; (resizing))
        {
            resizing = false;
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Windows
    if resizing = false
    {
        // Handle
            if (held)
            {
                x = mouse_x + x_off;
                y = mouse_y + y_off;
            }
            
        // Trigger
            if ((mouse_x &gt; x &amp;&amp; mouse_x &lt; x + window_width) &amp;&amp; (mouse_y &gt; y &amp;&amp; mouse_y &lt; y + window_topbar_height) 
            &amp;&amp; global.win_in_focus == id &amp;&amp; mouse_check_button_pressed(mb_left))
            {
                held = true;
                x_off = x - mouse_x;
                y_off = y - mouse_y;
            }
            
        // Untrigger
            if (mouse_check_button_released(mb_left) &amp;&amp; (held))
            {
                held = false;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Window
    // Config Alpha
        draw_set_alpha(window_scale)
        draw_set_font(fnt_interface)
        
    // Draw Window        
        draw_set_color(c_gray)
            draw_rectangle(x,y,x + window_width* window_scale, y + window_height* window_scale, 0)
            
        draw_set_color(c_white)
            draw_rectangle(x,y,x + window_width* window_scale, y + window_height* window_scale, 1)
    
    // Draw Window Top
        draw_set_color(c_aqua)
            draw_rectangle(x,y,x + window_width * window_scale, y + window_topbar_height* window_scale, 0)
    
        draw_set_color(c_blue)
            draw_rectangle(x,y,x + window_width * window_scale, y + window_topbar_height* window_scale, 1)
    
    // Draw Icon And Text
        draw_set_color(c_black)
            draw_sprite_ext(spr_window_close_icon, can_close, x - 4 + window_width * window_scale, y + 2, window_scale, window_scale, 0, c_white, window_scale)
            draw_sprite_ext(spr_window_icons, window_icon, x + 4, y + 2, window_scale, window_scale, 0, c_white, window_scale)
            draw_text(x + 18,y + 1,window_name)
        
    // Reset Alpha
        draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
