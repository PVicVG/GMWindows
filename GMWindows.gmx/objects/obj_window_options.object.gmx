<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Option
current_option = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute Option Action.

    // Action 1 - Center Window
        if (option_action[current_option] = 1)
        {
            window_center();
            fading = 1;
            audio_play_sound(ui_start, 1, 0)
        }
        

    // Action 2 - Restart
        if (option_action[current_option] = 2)
        {
            room_restart()
            fading = 1;
            audio_play_sound(ui_start, 1, 0)
        }
        
    // Action 3 - Change Sample Text Color Menu
        if (option_action[current_option] = 3)
        {
        // Create Instance
            var w_;
            w_ = instance_create(x, y, obj_window_options)
                
            // General Config
                w_.window_name = "Color Config";
                w_.window_icon = 2;
                w_.target_object = target_object;
                global.win_in_focus = w_.id;
                
            // Size
                w_.min_window_width = 128;
                w_.min_window_height = 50;
                w_.window_width = w_.min_window_width;
                w_.window_height = w_.min_window_height;
                
            // Options
                w_.option[1] = "Black";
                w_.option_action[1] = 4;
                        
                w_.option[2] = "White";
                w_.option_action[2] = 5;
                        
                w_.option_max = 2;
            
            // Exit
                fading = 1;
                audio_play_sound(ui_start, 1, 0)
        }
        
    // Action 4 - Color Black
        if (option_action[current_option] = 4)
        {
            target_object.custom_string_color = c_black;
            fading = 1;
            audio_play_sound(ui_start, 1, 0)
        }
        
    // Action 5 - Color White
        if (option_action[current_option] = 5)
        {
            target_object.custom_string_color = c_white;
            fading = 1;
            audio_play_sound(ui_start, 1, 0)
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Options

    // Config Drawing
        draw_set_alpha(window_scale)
    
    // Options
        var i;
        for (i = 1; i &lt; (option_max + 1); i += 1)
           {
           
           // Vars
                var option_highlighted;
                option_highlighted = false;
           
           // Check if mouse is inside position to set it highlighted.
                if ((mouse_inside_x == true) &amp;&amp; (mouse_y &gt; (y + 10 + (i * 10) + 2)) &amp;&amp; (mouse_y &lt; (y + 10 + (i * 10) + 10 + 2)) &amp;&amp; (global.win_in_focus == id) &amp;&amp; (resizing == false) &amp;&amp; (held == false))
                {
                    option_highlighted = true;
                }

            // Set Drawing Colors
                if (option_highlighted)
                {
                    draw_set_alpha(0.2)
                    draw_set_color(c_black)
                    draw_rectangle(x, y + 10 + (i * 10) + 2, x + window_width, (y + 10 + (i * 10) + 10 + 2), false)
                    
                    draw_set_alpha(1)
                    draw_set_color(c_yellow);
                    
                    if (current_option != i)
                    {
                        current_option = i
                        audio_play_sound(ui_next, 1, 0);
                    }
                }
                else
                {
                    draw_set_color(c_white);
                }
            
            // Option Text;
                draw_text(x + 4, y + 10 + (i * 10), string(option[i]));
                
            // Press Option
                if (mouse_check_button_pressed(mb_left) &amp;&amp; option_highlighted)
                {
                    event_user(0)
                }
           
           }

    // Reset Alpha
        draw_set_alpha(1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
